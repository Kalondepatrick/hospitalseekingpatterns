knitr::opts_chunk$set(echo = TRUE)
# Set random seed for reproducibility
set.seed(123)
# Generate dataset
n <- 1000
patient_data <- data.frame(
PatientID = 1:n,
DistanceToFacility = round(runif(n, min = 0.5, max = 50), 2) # Distances in km
)
# Display a sample
head(patient_data)
library(dplyr)
library(ggplot2)
# Group distances in intervals of 5 km
distance_summary <- patient_data %>%
mutate(DistanceGroup = cut(DistanceToFacility, breaks = seq(0, 50, by = 5), right = FALSE)) %>%
group_by(DistanceGroup) %>%
summarise(PatientCount = n())
# View summary
print(distance_summary)
# Plot the data
ggplot(distance_summary, aes(x = DistanceGroup, y = PatientCount)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme_minimal() +
labs(
title = "Patient Count vs Distance to Facility",
x = "Distance Range (km)",
y = "Number of Patients"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
set.seed(123)
n <- 1000
patient_data <- data.frame(
PatientID = 1:n,
DistanceToFacility = round(runif(n, min = 0.5, max = 10000), 2) # Distances in km
)
head(patient_data)
distance_summary <- patient_data %>%
mutate(DistanceGroup = cut(DistanceToFacility, breaks = seq(0, 10000, by = 500), right = FALSE)) %>%
group_by(DistanceGroup) %>%
summarise(PatientCount = n()) %>%
filter(!is.na(DistanceGroup)) # Remove empty groups if any
# View summary
print(distance_summary)
# Plot the data
ggplot(distance_summary, aes(x = DistanceGroup, y = PatientCount)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme_minimal() +
labs(
title = "Patient Count vs Distance to Facility",
x = "Distance Range (km)",
y = "Number of Patients"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
distance_summary <- patient_data %>%
mutate(DistanceGroup = cut(DistanceToFacility, breaks = seq(0, 10000, by = 500), right = FALSE)) %>%
group_by(DistanceGroup) %>%
summarise(PatientCount = n()) %>%
filter(!is.na(DistanceGroup)) # Remove empty groups if any
# View summary
print(distance_summary)
# Plot the data with proper distance ranges
ggplot(distance_summary, aes(x = DistanceGroup, y = PatientCount)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme_minimal() +
labs(
title = "Patient Count vs Distance to Facility",
x = "Distance Range (km)",
y = "Number of Patients"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_x_discrete(labels = function(x) gsub("([0-9]+),([0-9]+)", "\\1-\\2", x)) # Properly format the ranges
distance_summary <- patient_data %>%
mutate(DistanceGroup = cut(DistanceToFacility, breaks = seq(0, 10000, by = 500), right = FALSE)) %>%
group_by(DistanceGroup) %>%
summarise(PatientCount = n()) %>%
filter(!is.na(DistanceGroup)) # Remove empty groups if any
# View summary
print(distance_summary)
# Plot the data with proper distance ranges
ggplot(distance_summary, aes(x = DistanceGroup, y = PatientCount)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme_minimal() +
labs(
title = "Patient Count vs Distance to Facility",
x = "Distance Range (km)",
y = "Number of Patients"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_x_discrete(labels = function(x) paste(gsub("([0-9]+),([0-9]+)", "\\1-\\2", x)))
distance_summary <- patient_data %>%
mutate(DistanceGroup = cut(DistanceToFacility, breaks = seq(0, 10000, by = 500), right = FALSE)) %>%
group_by(DistanceGroup) %>%
summarise(PatientCount = n()) %>%
filter(!is.na(DistanceGroup))  # Remove empty groups if any
# View summary
print(distance_summary)
# Plot the data with proper distance ranges
ggplot(distance_summary, aes(x = DistanceGroup, y = PatientCount)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme_minimal() +
labs(
title = "Patient Count vs Distance to Facility",
x = "Distance Range (km)",
y = "Number of Patients"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_x_discrete(labels = function(x) paste(gsub("([0-9]+),([0-9]+)", "\\1-\\2", x)))
distance_summary <- patient_data %>%
mutate(DistanceGroup = cut(DistanceToFacility, breaks = seq(0, 10000, by = 500), right = FALSE)) %>%
group_by(DistanceGroup) %>%
summarise(PatientCount = n()) %>%
filter(!is.na(DistanceGroup))  # Remove empty groups if any
# View summary
print(distance_summary)
# Plot the data with proper distance ranges
ggplot(distance_summary, aes(x = as.numeric(gsub("([0-9]+),([0-9]+)", "\\1", DistanceGroup)), y = PatientCount)) +
geom_line(group = 1, color = "skyblue", size = 1.5) +
geom_point(color = "skyblue", size = 3) +
theme_minimal() +
labs(
title = "Patient Count vs Distance to Facility (Line Graph)",
x = "Distance Range (km)",
y = "Number of Patients"
) +
scale_x_continuous(breaks = seq(0, 10000, by = 500)) +  # Adjust x-axis for better spacing
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Adjust the data generation for larger distances
set.seed(123)
n <- 1000
patient_data <- data.frame(
PatientID = 1:n,
DistanceToFacility = round(runif(n, min = 0.5, max = 10000), 2) # Distances up to 10,000 km
)
# Group distances into 500 km intervals
distance_summary <- patient_data %>%
mutate(DistanceGroup = cut(DistanceToFacility, breaks = seq(0, 10000, by = 500), right = FALSE)) %>%
group_by(DistanceGroup) %>%
summarise(PatientCount = n()) %>%
filter(!is.na(DistanceGroup)) # Remove empty groups if any
# View summary
print(distance_summary)
# Extract the lower bound of the distance range for plotting purposes
distance_summary$DistanceLower <- as.numeric(gsub("([0-9]+),([0-9]+)", "\\1", distance_summary$DistanceGroup))
# Plot the data as a line graph
ggplot(distance_summary, aes(x = DistanceLower, y = PatientCount)) +
geom_line(group = 1, color = "skyblue", linewidth = 1.5) +  # Use `linewidth` instead of `size`
geom_point(color = "skyblue", size = 3) +
theme_minimal() +
labs(
title = "Patient Count vs Distance to Facility (Line Graph)",
x = "Distance Range (km)",
y = "Number of Patients"
) +
scale_x_continuous(breaks = seq(0, 10000, by = 500)) +  # Adjust x-axis for better spacing
theme(axis.text.x = element_text(angle = 45, hjust = 1))
set.seed(123)
n <- 1000
patient_data <- data.frame(
PatientID = 1:n,
DistanceToFacility = round(runif(n, min = 0.5, max = 1000), 2) # Distances in km
)
head(patient_data)
distance_summary <- patient_data %>%
mutate(DistanceGroup = cut(DistanceToFacility, breaks = seq(0, 10000, by = 500), right = FALSE)) %>%
group_by(DistanceGroup) %>%
summarise(PatientCount = n()) %>%
filter(!is.na(DistanceGroup))  # Remove empty groups if any
# View summary
print(distance_summary)
# Plot the data with proper distance ranges
ggplot(distance_summary, aes(x = as.numeric(gsub("([0-9]+),([0-9]+)", "\\1", DistanceGroup)), y = PatientCount)) +
geom_line(group = 1, color = "skyblue", size = 1.5) +
geom_point(color = "skyblue", size = 3) +
theme_minimal() +
labs(
title = "Patient Count vs Distance to Facility (Line Graph)",
x = "Distance Range (km)",
y = "Number of Patients"
) +
scale_x_continuous(breaks = seq(0, 10000, by = 500)) +  # Adjust x-axis for better spacing
theme(axis.text.x = element_text(angle = 45, hjust = 1))
distance_summary <- patient_data %>%
mutate(DistanceGroup = cut(DistanceToFacility, breaks = seq(0, 1000, by = 50), right = FALSE)) %>%
group_by(DistanceGroup) %>%
summarise(PatientCount = n()) %>%
filter(!is.na(DistanceGroup))  # Remove empty groups if any
# View summary
print(distance_summary)
# Plot the data with proper distance ranges
ggplot(distance_summary, aes(x = DistanceGroup, y = PatientCount)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme_minimal() +
labs(
title = "Patient Count vs Distance to Facility",
x = "Distance Range (km)",
y = "Number of Patients"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_x_discrete(labels = function(x) paste(gsub("([0-9]+),([0-9]+)", "\\1-\\2", x)))
set.seed(123)
n <- 1000
patient_data <- data.frame(
PatientID = 1:n,
DistanceToFacility = round(runif(n, min = 0.5, max = 1000), 2) # Distances in km
)
head(patient_data)
distance_summary <- patient_data %>%
mutate(DistanceGroup = cut(DistanceToFacility, breaks = seq(0, 1000, by = 50), right = FALSE)) %>%
group_by(DistanceGroup) %>%
summarise(PatientCount = n()) %>%
filter(!is.na(DistanceGroup))  # Remove empty groups if any
# View summary
print(distance_summary)
# Plot the data with proper distance ranges
ggplot(distance_summary, aes(x = DistanceGroup, y = PatientCount)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme_minimal() +
labs(
title = "Patient Count vs Distance to Facility",
x = "Distance Range (km)",
y = "Number of Patients"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_x_discrete(labels = function(x) paste(gsub("([0-9]+),([0-9]+)", "\\1-\\2", x)))
set.seed(123)
n <- 1000
patient_data <- data.frame(
PatientID = 1:n,
DistanceToFacility = round(runif(n, min = 0.5, max = 950), 2) # Distances in km
)
head(patient_data)
distance_summary <- patient_data %>%
mutate(DistanceGroup = cut(DistanceToFacility, breaks = seq(0, 1000, by = 50), right = FALSE)) %>%
group_by(DistanceGroup) %>%
summarise(PatientCount = n()) %>%
filter(!is.na(DistanceGroup))  # Remove empty groups if any
# View summary
print(distance_summary)
# Plot the data with proper distance ranges
ggplot(distance_summary, aes(x = DistanceGroup, y = PatientCount)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme_minimal() +
labs(
title = "Patient Count vs Distance to Facility",
x = "Distance Range (km)",
y = "Number of Patients"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_x_discrete(labels = function(x) paste(gsub("([0-9]+),([0-9]+)", "\\1-\\2", x)))
distance_summary <- patient_data %>%
mutate(DistanceGroup = cut(DistanceToFacility, breaks = seq(0, 1000, by = 50), right = FALSE)) %>%
group_by(DistanceGroup) %>%
summarise(PatientCount = n()) %>%
filter(!is.na(DistanceGroup))  # Remove empty groups if any
# View summary
print(distance_summary)
# Plot the data with proper distance ranges
ggplot(distance_summary, aes(x = DistanceGroup, y = PatientCount)) +
geom_bar(stat = "identity", fill = "skyblue") +
theme_minimal() +
labs(
title = "Patient Count vs Distance to Facility",
x = "Distance Range (km)",
y = "Number of Patients"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(distance_summary, aes(x = DistanceGroup, y = PatientCount)) +
geom_line(group = 1, color = "skyblue", size = 1) +
theme_minimal() +
labs(
title = "Patient Count vs Distance to Facility",
x = "Distance Range (km)",
y = "Number of Patients"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
distance_summary <- patient_data %>%
mutate(DistanceGroup = cut(DistanceToFacility, breaks = seq(0, 1000, by = 50), right = FALSE)) %>%
group_by(DistanceGroup) %>%
summarise(PatientCount = n()) %>%
filter(!is.na(DistanceGroup))  # Remove empty groups if any
# View summary
print(distance_summary)
# Plot the data with proper distance ranges
ggplot(distance_summary, aes(x = DistanceGroup, y = PatientCount)) +
geom_line(group = 1, color = "skyblue", size = 1) +
theme_minimal() +
labs(
title = "Patient Count vs Distance to Facility",
x = "Distance Range (km)",
y = "Number of Patients"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
distance_summary <- patient_data %>%
mutate(DistanceGroup = cut(DistanceToFacility, breaks = seq(0, 1000, by = 50), right = FALSE)) %>%
group_by(DistanceGroup) %>%
summarise(PatientCount = n()) %>%
filter(!is.na(DistanceGroup))  # Remove empty groups if any
# View summary
print(distance_summary)
# Plot the data with proper distance ranges
d= ggplot(distance_summary, aes(x = DistanceGroup, y = PatientCount)) +
geom_line(group = 1, color = "skyblue", size = 1) +
theme_minimal() +
labs(
title = "Patient Count vs Distance to Facility",
x = "Distance Range (km)",
y = "Number of Patients"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
distance_summary <- patient_data %>%
mutate(DistanceGroup = cut(DistanceToFacility, breaks = seq(0, 1000, by = 50), right = FALSE)) %>%
group_by(DistanceGroup) %>%
summarise(PatientCount = n()) %>%
filter(!is.na(DistanceGroup))  # Remove empty groups if any
# View summary
print(distance_summary)
# Plot the data with proper distance ranges
d= ggplot(distance_summary, aes(x = DistanceGroup, y = PatientCount)) +
geom_line(group = 1, color = "skyblue", size = 1) +
theme_minimal() +
labs(
title = "Patient Count vs Distance to Facility",
x = "Distance Range (km)",
y = "Number of Patients"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
d
knitr::opts_chunk$set(echo = TRUE)
set.seed(123)
n <- 1000
patient_data <- data.frame(
PatientID = 1:n,
DistanceToFacility = round(runif(n, min = 0.5, max = 950), 2) # Distances in km
)
patient_data$near <- sample(c("yes", "no"), size = n, replace = TRUE)
near_indices <- which(patient_data$near == "yes")
beta_scaled <- 0.5 + (950 - 0.5) * rbeta(length(near_indices), shape1 = 2, shape2 = 5)
patient_data$DistanceToFacility[near_indices] <- round(beta_scaled, 2)
head(patient_data)
library(ggplot2)
library(dplyr)
# Group and summarize data for both "yes" and "no" responses
distance_summary <- patient_data %>%
mutate(DistanceGroup = cut(DistanceToFacility, breaks = seq(0, 1000, by = 50), right = FALSE)) %>%
group_by(DistanceGroup, near) %>%
summarise(PatientCount = n(), .groups = "drop") %>%
filter(!is.na(DistanceGroup))  # Remove empty groups if any
# Plot with two lines for "yes" and "no" responses
d <- ggplot(distance_summary, aes(x = DistanceGroup, y = PatientCount, color = near, group = near)) +
geom_line(size = 1) +
theme_minimal() +
labs(
title = "Patient Count vs Distance to Facility by Response",
x = "Distance Range (km)",
y = "Number of Patients"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)
) +
scale_color_manual(values = c("skyblue", "salmon"))
d
set.seed(123)
n <- 10000
patient_data <- data.frame(
PatientID = 1:n,
DistanceToFacility = round(runif(n, min = 0.5, max = 950), 2)
)
patient_data$near <- sample(c("yes", "no"), size = n, replace = TRUE, prob = c(0.35, 0.65))
near_indices <- which(patient_data$near == "yes")
beta_scaled <- 0.5 + (950 - 0.5) * rbeta(length(near_indices), shape1 = 2, shape2 = 5)
patient_data$DistanceToFacility[near_indices] <- round(beta_scaled, 2)
head(patient_data)eToFacility[near_indices] <- round(beta_scaled, 2)
set.seed(123)
n <- 10000
patient_data <- data.frame(
PatientID = 1:n,
DistanceToFacility = round(runif(n, min = 0.5, max = 950), 2)
)
patient_data$near <- sample(c("yes", "no"), size = n, replace = TRUE, prob = c(0.35, 0.65))
near_indices <- which(patient_data$near == "yes")
beta_scaled <- 0.5 + (950 - 0.5) * rbeta(length(near_indices), shape1 = 2, shape2 = 5)
patient_data$DistanceToFacility[near_indices] <- round(beta_scaled, 2)
head(patient_data)
set.seed(123)
n <- 10000
patient_data <- data.frame(
PatientID = 1:n,
DistanceToFacility = round(runif(n, min = 0.5, max = 950), 2)
)
patient_data$near <- sample(c("yes", "no"), size = n, replace = TRUE, prob = c(0.35, 0.65))
near_indices <- which(patient_data$near == "yes")
beta_scaled <- 0.5 + (950 - 0.5) * rbeta(length(near_indices), shape1 = 2, shape2 = 5)
patient_data$DistanceToFacility[near_indices] <- round(beta_scaled, 2)
head(patient_data)
library(ggplot2)
library(dplyr)
distance_summary <- patient_data %>%
mutate(DistanceGroup = cut(DistanceToFacility, breaks = seq(0, 1000, by = 50), right = FALSE)) %>%
group_by(DistanceGroup, near) %>%
summarise(PatientCount = n(), .groups = "drop") %>%
filter(!is.na(DistanceGroup))
d <- ggplot(distance_summary, aes(x = DistanceGroup, y = PatientCount, color = near, group = near)) +
geom_line(size = 1) +
theme_minimal() +
labs(
title = "Patient Count vs Distance to Facility by Response",
x = "Distance Range (km)",
y = "Number of Patients"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)
) +
scale_color_manual(values = c("skyblue", "salmon"))
d
ggplot(patient_data, aes(x = near, y = DistanceToFacility, fill = near)) +
geom_boxplot() +
theme_minimal() +
labs(
title = "Distance to Facility by Near/No Response",
x = "Near Response",
y = "Distance to Facility (km)"
)
anova_test <- aov(DistanceToFacility ~ near, data = patient_data)
summary(anova_test)
ggplot(patient_data, aes(x = near, y = DistanceToFacility, fill = near)) +
geom_boxplot() +
theme_minimal() +
labs(
title = "Distance to Facility by Near/No Response",
x = "Near Response",
y = "Distance to Facility (km)"
)
# Wilcoxon test (non-parametric) to check if distance differs by near group
wilcox_test <- wilcox.test(DistanceToFacility ~ near, data = patient_data)
# Display the test result
wilcox_test
anova_test <- aov(DistanceToFacility ~ near, data = patient_data)
summary(anova_test)
ggplot(patient_data, aes(x = near, y = DistanceToFacility, fill = near)) +
geom_boxplot() +
theme_minimal() +
labs(
title = "Distance to Facility by Near/No Response",
x = "Near Response",
y = "Distance to Facility (km)"
)
model <- glm(near ~ DistanceToFacility, data = patient_data, family = binomial)
patient_data$near_binary <- ifelse(patient_data$near == "yes", 1, 0)
# Fit the logistic regression model
model <- glm(near_binary ~ DistanceToFacility, data = patient_data, family = binomial)
summary(model)
patient_data <- patient_data %>%
mutate(DistanceGroup = cut(DistanceToFacility, breaks = c(0, 250, 500, 750, 1000)))
chisq.test(table(patient_data$DistanceGroup, patient_data$near))
ggplot(patient_data, aes(x = DistanceToFacility, y = as.numeric(near == "yes"))) +
geom_smooth(method = "glm", method.args = list(family = "binomial"), color = "blue") +
labs(
title = "Probability of Choosing Near by Distance",
x = "Distance to Facility (km)",
y = "Probability of Near"
) +
theme_minimal()
patient_data$near_binary <- ifelse(patient_data$near == "yes", 1, 0)
# Fit the logistic regression model
model <- glm(near_binary ~ DistanceToFacility, data = patient_data, family = binomial)
summary(model)
ggplot(patient_data, aes(x = DistanceToFacility, y = as.numeric(near == "yes"))) +
geom_smooth(method = "glm", method.args = list(family = "binomial"), color = "blue") +
labs(
title = "Probability of Choosing Near by Distance",
x = "Distance to Facility (km)",
y = "Probability of Near"
) +
theme_minimal()
patient_data$far_binary <- ifelse(patient_data$near == "no", 1, 0)
model <- glm(far_binary ~ DistanceToFacility, data = patient_data, family = binomial)
summary(model)
ggplot(patient_data, aes(x = DistanceToFacility, y = as.numeric(near == "far"))) +
geom_smooth(method = "glm", method.args = list(family = "binomial"), color = "blue") +
labs(
title = "Probability of Choosing Near by Distance",
x = "Distance to Facility (km)",
y = "Probability of Far"
) +
theme_minimal()
patient_data$far_binary <- ifelse(patient_data$near == "no", 1, 0)
model <- glm(far_binary ~ DistanceToFacility, data = patient_data, family = binomial)
summary(model)
ggplot(patient_data, aes(x = DistanceToFacility, y = as.numeric(near == "no"))) +
geom_smooth(method = "glm", method.args = list(family = "binomial"), color = "blue") +
labs(
title = "Probability of Choosing Near by Distance",
x = "Distance to Facility (km)",
y = "Probability of Far"
) +
theme_minimal()
